{"version":3,"file":"static/js/768.b5c8ab4d.chunk.js","mappings":"sNAWgBA,EAAAA,GAAAA,OAAa,kFACX,SAAAC,GAAK,OAAIA,EAAMC,EAAE,IACtB,SAAAD,GAAK,MAAgB,QAAZA,EAAMC,GAAe,QAAU,OAAO,IAuG5D,SAASC,EAAY,GAAW,IAAVC,EAAM,EAANA,OAEpB,GAAsBC,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAAEC,EAAO,KAYlB,OAXAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAIC,YAAW,WAAMH,EAAQ,MAAO,GAAG,IAG3C,OAAO,WACLA,EAAQ,IACRI,aAAaF,EACd,CACH,GAAE,CAACL,KAID,gBAAKQ,UAAS,gBAAWN,GAAO,SAE5B,EAAC,yBAAK,mBAAU,yBAAK,mBAAU,yBAAK,mBAAWF,IAGvD,CAIA,UA1HA,SAAgBH,GAEd,IAAKY,GAAMC,EAAAA,EAAAA,MAAND,GACDE,EAAUd,EAAMe,MAAMC,MAAK,SAACC,GAAM,OAAOA,EAAEL,IAAMA,CAAG,IAGxD,GAAsBR,EAAAA,EAAAA,WAAS,GAAK,eAA/Bc,EAAI,KAAEC,EAAO,KAClB,GAA4Bf,EAAAA,EAAAA,UAAS,IAAG,eAAnCgB,EAAO,KAAEC,EAAU,KACxB,GAA0BjB,EAAAA,EAAAA,UAAS,GAAE,eAAhCD,EAAM,KAAEmB,EAAS,KACtB,GAAsBlB,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAAEC,EAAO,KA2BlB,OAxBAC,EAAAA,EAAAA,YAAU,WAER,IAAIgB,EAAcC,aAAaC,QAAQ,YACvCF,EAAcG,KAAKC,MAAMJ,IACbK,KAAKd,EAAQF,IAEzBW,EAAc,IAAIM,IAAIN,GACtBA,EAAcO,MAAMC,KAAKR,GACzBC,aAAaQ,QAAQ,UAAWN,KAAKO,UAAUV,GACjD,GAAE,KAEFhB,EAAAA,EAAAA,YAAU,WAER,IAAIC,EAAIC,YAAW,WAAMU,GAAQ,EAAO,GAAG,KAI3C,OAHAV,YAAW,WAAMH,EAAQ,MAAO,GAAG,IAEb,GAAlB4B,MAAMd,IAAmBe,MAAM,2DAC5B,WACLzB,aAAaF,EAEd,CAEH,GAAG,CAACY,KAGF,gBAAKT,UAAS,gBAAWN,GAAO,UAC9B,iBAAKM,UAAU,YAAW,UAGd,GAARO,GAEE,gBAAKP,UAAU,sBAAqB,SAAC,wDAGrC,MAUJ,iBAAKA,UAAU,MAAK,WAClB,gBAAKA,UAAU,WAAU,UACvB,gBAAKyB,IAAK,6CAA6CtB,EAAQF,GAAG,GAAG,OAAQyB,MAAM,YAErF,iBAAK1B,UAAU,WAAU,WACvB,eAAIA,UAAU,OAAM,SAAEG,EAAQwB,SAC9B,uBAAIxB,EAAQyB,WACZ,yBAAIzB,EAAQ0B,MAAM,aAClB,mBAAQ7B,UAAU,iBAAiB8B,QAAS,WAE1CC,UAASC,EAAAA,EAAAA,IAAQ7B,GACnB,EAAE,SAAC,oCAKP,gBAAKH,UAAU,YAAW,UACxB,kBAAOiC,SAAU,SAACC,GAAMxB,EAAWwB,EAAEC,OAAOC,MAAO,EAAGC,YAAY,+DAKpE,UAAC,IAAG,CAACC,QAAQ,OAAOC,iBAAiB,QAAO,WAC1C,SAAC,SAAQ,WACP,SAAC,SAAQ,CAACC,SAAS,QAAQV,QAAS,WAAMnB,EAAU,EAAG,EAAE,SAAE,qBAE7D,SAAC,SAAQ,WACP,SAAC,SAAQ,CAAC6B,SAAS,QAAQV,QAAS,WAAMnB,EAAU,EAAG,EAAE,SAAE,qBAE7D,SAAC,SAAQ,WACP,SAAC,SAAQ,CAAC6B,SAAS,QAAQV,QAAS,WAAMnB,EAAU,EAAG,EAAE,SAAE,wBAK/D,SAACpB,EAAW,CAACC,OAAQA,QAK7B,C","sources":["routes/Detail.js"],"sourcesContent":["/* eslint-disable */ //warning 제거\r\n\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addCart } from \"./../store.js\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport { Context1 } from '../App.js' //App.js에서 Detail.js로 공유받고싶은 state import\r\nimport store from \"./../store.js\";\r\n\r\nlet YellowBtn = styled.button`\r\n  background : ${ props => props.bg };\r\n  color : ${ props => props.bg == 'blue' ? 'white' : 'black' };\r\n  padding : 10px;\r\n  `\r\n  // bg가 blue이면 color white, 아니면 color black\r\n\r\nfunction Detail(props){\r\n  // useParams() : 유저가 URL파라미터에 입력한 값 가져와줌 (파라미터 사용하기)\r\n  let {id} = useParams();\r\n  let product = props.shoes.find((x)=>{ return x.id == id });\r\n  // let product = props.shoes.find( x => x.id == id)\r\n\r\n  let [over, setOver] = useState(true); //2초이내 구매페이지 유무\r\n  let [isdigit, setIsdigit] = useState(''); //숫자입력 인풋창 밸류값\r\n  let [protab, setProtab] = useState(0); //탭변경\r\n  let [fade, setFade] = useState('');\r\n\r\n  //최근 본 상품 : localStorage에 저장\r\n  useEffect(()=>{\r\n    //localStorage는 수정이 안 되니까 저장된 정보를 꺼내서 업데이트하고 다시 넣어줘야 함\r\n    let watchedData = localStorage.getItem('watched')\r\n    watchedData = JSON.parse(watchedData)\r\n    watchedData.push(product.id)\r\n    //중복제거하기\r\n    watchedData = new Set(watchedData) //집합으로 만들었다가\r\n    watchedData = Array.from(watchedData) //배열로 바꾸기\r\n    localStorage.setItem('watched', JSON.stringify(watchedData))\r\n  },[])\r\n      \r\n  useEffect(()=>{\r\n    // 페이지가 mount, update 마다 코드 실행\r\n    let a = setTimeout(()=>{ setOver(false) }, 2000)\r\n    setTimeout(()=>{ setFade('end') }, 10)\r\n\r\n    if (isNaN(isdigit) == true){ alert('숫자만 입력해주세요') }\r\n    return ()=>{ \r\n      clearTimeout(a)\r\n      // setFade('')\r\n     }\r\n\r\n  }, [isdigit]); //isdigit 내용 바뀔 때마다 useEffect()실행\r\n\r\n  return(\r\n    <div className={`start ${fade}`}>\r\n      <div className=\"container\">\r\n        {\r\n          //useEffect()예제 : 2초이내 구매페이지 유무\r\n          over == true \r\n          ?\r\n            <div className=\"alert alert-warning\">\r\n              2초이내 구매시 할인\r\n            </div>\r\n          : null\r\n        }\r\n\r\n\r\n        {/*  sytled-components 예제\r\n        <YellowBtn bg=\"blue\">버튼</YellowBtn>\r\n        <YellowBtn bg=\"orange\">버튼</YellowBtn> \r\n        */}\r\n\r\n        {/* 제품상세UI */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <img src={\"https://codingapple1.github.io/shop/shoes\"+(product.id+1)+\".jpg\"} width=\"100%\" />\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <h4 className=\"pt-5\">{product.title}</h4>\r\n            <p>{product.content}</p>\r\n            <p>{product.price}원</p>\r\n            <button className=\"btn btn-danger\" onClick={()=>{\r\n              //새로운 상품이 cart state에 추가되는 기능\r\n              dispatch(addCart(product))\r\n            }}>장바구니</button> \r\n          </div>\r\n        </div>\r\n\r\n        {/* 숫자입력 인풋창 */}\r\n        <div className=\"input_num\">\r\n          <input onChange={(e)=>{ setIsdigit(e.target.value) }} placeholder=\"숫자만 입력해주세요\" />\r\n          {/* <input id=\"number\" onChange={()=>{ setIsdigit(document.getElementById(\"number\").value) }} /> */}\r\n        </div>\r\n\r\n        {/* Tabs */}\r\n        <Nav variant=\"tabs\" defaultActiveKey=\"link0\">\r\n          <Nav.Item>\r\n            <Nav.Link eventKey=\"link0\" onClick={()=>{ setProtab(0) }} >버튼0</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey=\"link1\" onClick={()=>{ setProtab(1) }} >버튼1</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey=\"link2\" onClick={()=>{ setProtab(2) }} >버튼2</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n\r\n        {/* TabContent */}\r\n        <TabsContent protab={protab} />\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction TabsContent({protab}) {\r\n\r\n  let [fade, setFade] = useState('')\r\n  useEffect(()=>{\r\n    let a = setTimeout(()=>{ setFade('end') }, 10)\r\n    //setFade('end')만 하면 중복코드라고 인식해서 setFade('')와 동시에 실행됨\r\n    \r\n    return ()=>{ \r\n      setFade('')\r\n      clearTimeout(a)\r\n     }\r\n  },[protab])\r\n\r\n  //opacity 주기위해 div로 감쌈\r\n  return (\r\n    <div className={`start ${fade}`} >\r\n      {/* {\"start \"+fade} 랑 똑같음 */}\r\n      { [<div>내용0</div>,<div>내용1</div>,<div>내용2</div>][protab] }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Detail;"],"names":["styled","props","bg","TabsContent","protab","useState","fade","setFade","useEffect","a","setTimeout","clearTimeout","className","id","useParams","product","shoes","find","x","over","setOver","isdigit","setIsdigit","setProtab","watchedData","localStorage","getItem","JSON","parse","push","Set","Array","from","setItem","stringify","isNaN","alert","src","width","title","content","price","onClick","dispatch","addCart","onChange","e","target","value","placeholder","variant","defaultActiveKey","eventKey"],"sourceRoot":""}